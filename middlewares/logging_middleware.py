"""
This module contains a custom middleware for logging incoming HTTP requests.
It logs request details such as the URL, HTTP method, headers, and client information.
This can be useful for monitoring, debugging, and tracking incoming requests.

Dependencies:
- starlette.middleware.base.BaseHTTPMiddleware
- starlette.requests.Request
- starlette.responses.Response
- utils.logging_config.app_logger

The middleware logs relevant request data and then forwards the request to the next
middleware or endpoint.
"""

from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from starlette.requests import Request
from starlette.responses import Response
from utils.logging_config import app_logger


class LoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware that logs request details such as URL, method, headers, and client information.

    This middleware is applied to log important request information for monitoring and debugging purposes.
    It is executed before processing the request and after the response is generated.
    """

    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:
        """
        Logs request details before passing the request to the next middleware or endpoint.

        Args:
            request (Request): The incoming HTTP request object.
            call_next (RequestResponseEndpoint): The next middleware or endpoint to handle the request.

        Returns:
            Response: The response generated by the endpoint or next middleware.
        """
        app_logger.info(
            f"Request: "
            f"[url: {request.url}, "
            f"method: {request.method}, "
            f"headers: {request.headers}, "
            f"client: {request.client}]"
        )
        return await call_next(request)
